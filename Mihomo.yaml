# 机场订阅
proxy-providers:
  BitzNet:
    url: "链接"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: DIRECT
    header:
      User-Agent:
      - "Clash.meta"
  PQ Airport:
    url: "链接"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: DIRECT
    header:
      User-Agent:
      - "Clash.meta"

# 节点信息
proxies:
  - {name: DIRECT, type: direct, udp: true}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: true
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板
external-controller: 0.0.0.0:9988
secret: "Gyn78198"
external-ui: "/etc/mihomo/run/ui"
external-ui-name: zashboard
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "rule-set:private_domain,cn_domain"
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"
    - "+.wechat.com"
    - "+.qpic.cn"
    - "+.qq.com"
    - "+.wechatapp.com"
    - "+.vivox.com"
    - "+.oray.com"
    - "+.sunlogin.net"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: system
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: true
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.services.googleapis.cn"
    - "+.xn--ngstr-lra8j.com"
    - "time.*.com"
    - "+.pool.ntp.org"
    - "+.ntp.tencent.com"
    - "+.ntp1.aliyun.com"
    - "+.ntp.ntsc.ac.cn"
    - "+.cn.ntp.org.cn"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - 127.0.0.1:5225
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 127.0.0.1:5225
 
# 出站策略
Proxy: &pr {type: select, proxies: [🇭🇰 香港节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🇯🇵 日本节点, 🌐 其他地区, 🐸 手动切换1, 🐸 手动切换2, 🐸 手动切换3, 🐸 手动切换4, ♻️ 自动选择, ✈️ 故障转移(主), 🔯 故障转移(备), DIRECT]}
Online: &ol {type: select, proxies: [✈️ 故障转移(主), 🔯 故障转移(备), 🇭🇰 香港节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🇯🇵 日本节点, 🌐 其他地区, 🐸 手动切换1, 🐸 手动切换2, 🐸 手动切换3, 🐸 手动切换4, ♻️ 自动选择, DIRECT]}
Driect: &dr {type: select, proxies: [DIRECT, 🇭🇰 香港节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🇯🇵 日本节点, 🌐 其他地区, 🐸 手动切换1, 🐸 手动切换2, 🐸 手动切换3, 🐸 手动切换4, ♻️ 自动选择, ✈️ 故障转移(主), 🔯 故障转移(备)]}
proxy-groups:
    - {name: 🤖 AI, <<: *pr}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 📺 Emby, <<: *pr}
  - {name: 📺 Netflix, <<: *pr}
  - {name: 📺 Disney, <<: *pr}
  - {name: 🍎 Apple TV, <<: *pr}
  - {name: 🎮 游戏平台, <<: *pr}
  - {name: 🌍 国外媒体, <<: *pr}
  - {name: ☎️ Google Voice, <<: *pr}
  
  - {name: 🍀 Google, <<: *ol}
  - {name: 🚀 常用外网域名, <<: *ol}
  - {name: 🕊️ Twitter(X), <<: *ol}
  - {name: 📲 Telegram, <<: *ol}
  - {name: 👨🏿‍💻 GitHub, <<: *ol}
  - {name: 🐟 漏网之鱼, <<: *ol}
  - {name: 🐬 OneDrive, <<: *ol}
  
  - {name: 🪟 Microsoft, <<: *dr}
  - {name: ♻️ Speedtest, <<: *dr}
  - {name: 🍎 Apple, <<: *dr}
  - {name: 🎯 DIRECT, <<: *dr}
  
  # 嵌套节点组
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong|HK|🇭🇰"}
  - {name: 🇸🇬 狮城节点, type: select, include-all: true, filter: "(?i)新加坡|坡|狮城|sg|singapore"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|us|unitedstates|united states"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|jp|japan"}
  - {name: 🐸 手动切换1, type: select, include-all: true}
  - {name: 🐸 手动切换2, type: select, include-all: true}
  - {name: 🐸 手动切换3, type: select, include-all: true}
  - {name: 🐸 手动切换4, type: select, include-all: true}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(DIRECT)).)*$"}
  - {name: ✈️ 故障转移(主), type: fallback, include-all: true, tolerance: 20, interval: 300}
  - {name: 🔯 故障转移(备), type: fallback, include-all: true, tolerance: 20, interval: 300}

# 规则匹配
rules:
  - RULE-SET,private_domain,🎯 DIRECT
  - RULE-SET,proxylite_class,🚀 常用外网域名
  - RULE-SET,ai_domain,🤖 AI
  - RULE-SET,twitter_domain,🕊️ Twitter(X)
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,emby_class,📺 Emby
  - RULE-SET,netflix_domain,📺 Netflix
  - RULE-SET,disney_domain,📺 Disney
  - RULE-SET,apple tv_class,🍎 Apple TV
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,onedrive_domain,☁️ OneDrive
  - RULE-SET,microsoft_domain,💾 Microsoft
  - RULE-SET,google voice_class,☎️ Google Voice
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,steam_domain,🎮 游戏平台
  - RULE-SET,epic_domain,🎮 游戏平台
  - RULE-SET,proxy media_domain,🌍 国外媒体
  - RULE-SET,speedtest_domain,♻️ Speedtest
  - RULE-SET,gfw_domain,🚀 常用外网域名
  - RULE-SET,geolocation-!cn,🚀 常用外网域名
  - RULE-SET,cn_domain,🎯 DIRECT
  - RULE-SET,twitter_ip,🕊️ Twitter(X),no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,cn_ip,🎯 DIRECT
  - MATCH,🐟 漏网之鱼

# 远程规则集
rule-anchor:
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
rule-providers: 
  proxylite_class: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/master/ProxyLite.list"}
  emby_class: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Emby/Emby.list"}
  apple tv_class: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/AppleTV/AppleTV.list"}
  google voice_class: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/GoogleVoice/GoogleVoice.list"}
  
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  ai_domain: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-chat-!cn.mrs" }
  twitter_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/twitter.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  disney_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/disney.mrs"}
  apple_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/apple.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  steam_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/steam.mrs"}
  epic_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/epicgames.mrs"}
  proxy media_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo-lite/geosite/proxymedia.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"} 
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  twitter_ip: { <<: *ip, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geoip/twitter.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
